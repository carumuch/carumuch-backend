name: CI/CD

# 1. 동작 조건 설정: main 브랜치에 push 혹은 pull request가 발생할 경우
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # Spring Boot를 빌드하여 Docker Hub에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      # 0. 코드 체크아웃
      - uses: actions/checkout@v4

      # 1. 외부 설정 파일 세팅
      - name: application yml
        run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml

      # 2. Java JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Spring Boot 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean bootjar

      # 4. Docker 이미지 빌드
      - name: Docker image build
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.REPOSITORY_NAME }} .

      # 5. Docker Hub 로그인
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 6. Docker Hub에 푸시
      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.REPOSITORY_NAME }}

      # 7. EC2에 원격 접속 후 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_INSTANCE_HOST }}
          port: ${{ secrets.EC2_INSTANCE_PORT }}
          username: ${{ secrets.EC2_INSTANCE_USERNAME }}
          key: ${{ secrets.EC2_INSTANCE_PRIVATE_KEY }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.REPOSITORY_NAME }}
            docker stop carumuch-service || true
            docker rm carumuch-service || true
            docker run -d -p 8080:8080 --platform linux/amd64 --network capstone-network -e "spring.datasource.url=jdbc:mysql://mysql:3306/capstone" -e "spring.data.redis.host=redis" --name carumuch-service ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.REPOSITORY_NAME }}
            docker image prune -f

